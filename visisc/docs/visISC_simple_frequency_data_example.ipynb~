{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# visISC Example: Visualizing Anomalous Frequency Data with Classes \n",
    "In this example, we will show what to do when you are analysing frequency counts of data and you want to identify which part of the data is the reason for a deviation.   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda/lib/python2.7/site-packages/pyface/ui/wx/init.py:25: wxPyDeprecationWarning: Using deprecated class PySimpleApp. \n",
      "  _app = wx.PySimpleApp()\n",
      "Warning: Unable to import the wx backend for pyface due to traceback: Traceback (most recent call last):\n",
      "\t  File \"//anaconda/lib/python2.7/site-packages/pyface/toolkit.py\", line 45, in _init_toolkit\n",
      "\t    be = import_toolkit(tk)\n",
      "\t  File \"//anaconda/lib/python2.7/site-packages/pyface/toolkit.py\", line 31, in import_toolkit\n",
      "\t    __import__(be + 'init')\n",
      "\t  File \"//anaconda/lib/python2.7/site-packages/pyface/ui/wx/init.py\", line 25, in <module>\n",
      "\t    _app = wx.PySimpleApp()\n",
      "\t  File \"//anaconda/lib/python2.7/site-packages/wx-3.0-osx_cocoa/wx/_core.py\", line 91, in __init__\n",
      "\t    item.__init__(*args, **kw)\n",
      "\t  File \"//anaconda/lib/python2.7/site-packages/wx-3.0-osx_cocoa/wx/_core.py\", line 8734, in __init__\n",
      "\t    wx.App.__init__(self, redirect, filename, useBestVisual, clearSigInt)\n",
      "\t  File \"//anaconda/lib/python2.7/site-packages/wx-3.0-osx_cocoa/wx/_core.py\", line 8599, in __init__\n",
      "\t    raise SystemExit(msg)\n",
      "\tSystemExit: This program needs access to the screen.\n",
      "\tPlease run with a Framework build of python, and only when you are\n",
      "\tlogged in on the main display of your Mac.\n",
      "\n",
      "WARNING:traits.has_traits:DEPRECATED: traits.has_traits.wrapped_class, 'the 'implements' class advisor has been deprecated. Use the 'provides' class decorator.\n"
     ]
    }
   ],
   "source": [
    "import pyisc;\n",
    "import visisc;\n",
    "import numpy as np\n",
    "import datetime\n",
    "from scipy.stats import poisson, norm, multivariate_normal\n",
    "%matplotlib wx\n",
    "from pylab import plot, figure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Frequency Data\n",
    "First, we create a data set with a set of data sources and a set of Poisson distributed frequency counts and then train an anomaly detector:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_sources = 10\n",
    "n_frequencies = 20\n",
    "num_of_normal_days = 200\n",
    "num_of_anomalous_days = 10\n",
    "data = None\n",
    "days_list = [num_of_normal_days, num_of_anomalous_days]\n",
    "dates = []\n",
    "for state in [0,1]: # normal, anomalous data\n",
    "    num_of_days = days_list[state]\n",
    "    for i in range(n_sources):\n",
    "        data0 = None\n",
    "        for j in range(n_frequencies):\n",
    "            if state == 0:# Normal\n",
    "                po_dist = poisson(int((10+2*(n_sources-i))*(float(j)/n_frequencies/2+0.75))) # from 0.75 to 1.25\n",
    "            else: # anomalous\n",
    "                po_dist = poisson(int((20+2*(n_sources-i))*(float(j)/n_frequencies+0.5))) # from 0.5 to 1.5\n",
    "\n",
    "            tmp = po_dist.rvs(num_of_days)\n",
    "            if data0 is None:\n",
    "                data0 = tmp\n",
    "            else:\n",
    "                data0 = np.c_[data0,tmp]\n",
    "\n",
    "        tmp =  np.c_[\n",
    "                    [1] * (num_of_days),\n",
    "                    data0,\n",
    "                    [\n",
    "                        datetime.date(2015,02,24) + datetime.timedelta(d) \n",
    "                        for d in np.array(range(num_of_days)) + (0 if state==0 else num_of_normal_days)\n",
    "                    ],\n",
    "                    [i] * (num_of_days)\n",
    "                    \n",
    "                    ]\n",
    "        \n",
    "        if data is None:\n",
    "            data = tmp\n",
    "        else:\n",
    "            data = np.r_[\n",
    "                tmp,\n",
    "                data\n",
    "            ]\n",
    "\n",
    "# Column index into the data\n",
    "first_frequency_column = 1\n",
    "period_column = 0\n",
    "date_column = data.shape[-1]-2\n",
    "source_column = data.shape[-1]-1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Flat Message Data Model\n",
    "<b>Next, we create a message data model that describes how our messages are connected. In this case, we assume only a flat structure with messages</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we create a flat model with a root element where all columns in the data are subelements:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = visisc.MessageDataModel.flat_model(\n",
    "    message_columns=range(first_frequency_column,date_column)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Second we transform numpy array to a pyisc data object. The data object consists of the orginial message columns, the source column, period column and a root column containg the sum of all message frequency counts per day. In this case, the source and the class are the same. The source identifies the origin of the data, for instance, the user or machine that generates the data, while the class is the type of source. A reference to the last created data object is also kept in the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_object = model.data_object(    \n",
    "    data,\n",
    "    source_column = source_column,\n",
    "    class_column = source_column,\n",
    "    period_column = period_column,\n",
    "    date_column =  date_column\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thereafter, we create an anomaly detector and fit a onesided poisson distribution for each message column.\n",
    "A reference to the last created and fitted anomaly detector is also kept in the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "anomaly_detector = model.fit_anomaly_detector(data_object, poisson_onesided=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization\n",
    "Finally, we can viualize the message frequency data using the Visualization class. However, due to incompatibility between theused 3D egnine and Jupyter notebook, we have to run the notebook as a script:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "vis = visisc.MessageVisualization(model, 13.8,start_day=209)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "//anaconda/lib/python2.7/site-packages/path.py:122: UserWarning: Module argparse was already imported from //anaconda/lib/python2.7/argparse.pyc, but /anaconda/lib/python2.7/site-packages is being added to sys.path\n",
      "  import pkg_resources\n",
      "//anaconda/lib/python2.7/site-packages/path.py:122: UserWarning: Module pdb was already imported from //anaconda/lib/python2.7/pdb.pyc, but /anaconda/lib/python2.7/site-packages is being added to sys.path\n",
      "  import pkg_resources\n",
      "Python 2.7.10 |Anaconda 2.5.0 (x86_64)| (default, Oct 19 2015, 18:31:17) \n",
      "Type \"copyright\", \"credits\" or \"license\" for more information.\n",
      "\n",
      "IPython 4.0.3 -- An enhanced Interactive Python.\n",
      "?         -> Introduction and overview of IPython's features.\n",
      "%quickref -> Quick reference.\n",
      "help      -> Python's own help system.\n",
      "object?   -> Details about 'object', use 'object??' for extra details.\n",
      "MessageDataModel created\n",
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)\n",
      "\u001b[0;32m/Users/tol/Documents/SubversionFolders/tdvis_all/isc2py/visisc/docs/visISC_simple_frequency_data_example.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n",
      "\u001b[1;32m    103\u001b[0m \u001b[0;31m# <b>Finally, we can viualize the message frequency data using the Visualization class. However, due to a bug in the underlying 3D egnine, we have to run the notebook as a script:</b>\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m--> 105\u001b[0;31m \u001b[0mvis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvisisc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMessageVisualization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m13.8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstart_day\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m209\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[1;32m    106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\n",
      "\u001b[0;32m//anaconda/lib/python2.7/site-packages/MessageVisualization.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, visualisation_model, decision_threshold, start_day, num_of_shown_days, precompute_cache)\u001b[0m\n",
      "\u001b[1;32m    279\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manomaly_detection_threshold\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecision_threshold\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m    280\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m--> 281\u001b[0;31m         \u001b[0mdates\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvisualisation_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_message_data_object\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[1;32m    282\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdates\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdates\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatetime\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m    283\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data_times\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmktime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimetuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0md\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdates\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\n",
      "\u001b[0;32m//anaconda/lib/python2.7/site-packages/pyisc.pyc\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(self, name)\u001b[0m\n",
      "\u001b[1;32m    245\u001b[0m     \u001b[0m__setattr__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_swig_setattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_DataObject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m    246\u001b[0m     \u001b[0m__swig_getmethods__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m--> 247\u001b[0;31m     \u001b[0m__getattr__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_swig_getattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_DataObject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[1;32m    248\u001b[0m     \u001b[0m__repr__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_swig_repr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m    249\u001b[0m     \u001b[0m__swig_destroy__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_pyisc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete__DataObject\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\n",
      "\u001b[0;32m//anaconda/lib/python2.7/site-packages/pyisc.pyc\u001b[0m in \u001b[0;36m_swig_getattr\u001b[0;34m(self, class_type, name)\u001b[0m\n",
      "\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m     73\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_swig_getattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m---> 74\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_swig_getattr_nondynamic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\n",
      "\u001b[0;32m//anaconda/lib/python2.7/site-packages/pyisc.pyc\u001b[0m in \u001b[0;36m_swig_getattr_nondynamic\u001b[0;34m(self, class_type, name, static)\u001b[0m\n",
      "\u001b[1;32m     67\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m     68\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mstatic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m---> 69\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[1;32m     70\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m     71\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\n",
      "\u001b[0;31mAttributeError\u001b[0m: type object 'object' has no attribute '__getattr__'\n",
      "\n",
      "\u001b[0;34mIn [\u001b[1;34m1\u001b[0;34m]: \u001b[0m"
     ]
    }
   ],
   "source": [
    "!ipython --matplotlib=wx --gui=wx -i visISC_simple_frequency_data_example.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you soon will se a window looking similar to the picture below, which shows the 30 last (y-axis) frequancy counts (z-axis) for the different sources (x-axis). The white color means anomaly scores less than 13.8, while red color means anomaly scores larger than 13.8. As can be seen, only the last 10 days are anomalous. For more on interacting with the visualisation window, see Mayavi documenttation on <a href=\"http://docs.enthought.com/mayavi/mayavi/application.html#interaction-with-the-scene\">Interaction with the scene</a>.<br/>\n",
    "<img src=\"simple_vis_1.png\"/><br/>\n",
    "If we click on a source label or a bar, we can zoom into the source instance and we can see the detail of each message frequency count (x-axis). Below, the data for source 2 is shown and now, we see that only if we look at the root element, we are able to detect this instance as an anomaly.<br/>\n",
    "<img src=\"simple_vis_2.png\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysing a different data set than used for training\n",
    "In the shown example, we have used the same data for training the anomaly detector as we use when visualizing. However, we can easily replace the data set by calling model.data_object again with another data set, and then create a new instance of Visualization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2.0
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}