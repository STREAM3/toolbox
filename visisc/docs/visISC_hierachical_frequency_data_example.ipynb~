{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# visISC Example: Visualizing Anomalous Frequency Data with Hierarchical Data \n",
    "In this example, we will show what to do when you are analysing frequency counts of data and the data is organized in an hierarchy. For instance, when you are analysing message or alarm rates over time, and you have many different types of messages or alarms, including higher level alarms.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyisc;\n",
    "import visisc;\n",
    "import numpy as np\n",
    "import datetime\n",
    "from scipy.stats import poisson, norm, multivariate_normal\n",
    "%matplotlib wx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Message Frequency Data\n",
    "In this example, similarly to the <a href=\"visISC_simple_frequency_data_example.ipynb\">previous example with a flat structure</a>, we create a data set with a set of sources and a set of Poisson distributed frequency counts, but with many more columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_sources = 10\n",
    "n_frequencies = 100\n",
    "num_of_normal_days = 200\n",
    "num_of_anomalous_days = 10\n",
    "data = None\n",
    "days_list = [num_of_normal_days, num_of_anomalous_days]\n",
    "dates = []\n",
    "for state in [0,1]:\n",
    "    num_of_days = days_list[state]\n",
    "    for i in range(n_sources):\n",
    "        data0 = None\n",
    "        for j in range(n_frequencies):\n",
    "            if state == 0:\n",
    "                po_dist = poisson(int((1+2*(n_sources-i))*(float(j)/n_frequencies/2+0.75))) # from 0.75 to 1.25\n",
    "            else:\n",
    "                po_dist = poisson(int((5+2*(n_sources-i))*(float(j)/n_frequencies+0.5))) # from 0.5 to 1.5\n",
    "\n",
    "            tmp = po_dist.rvs(num_of_days)\n",
    "            if data0 is None:\n",
    "                data0 = tmp\n",
    "            else:\n",
    "                data0 = np.c_[data0,tmp]\n",
    "\n",
    "        tmp =  np.c_[\n",
    "                    [1] * (num_of_days),\n",
    "                    data0,\n",
    "                    [\n",
    "                        datetime.date(2015,02,24) + datetime.timedelta(d) \n",
    "                        for d in np.array(range(num_of_days)) + (0 if state==0 else num_of_normal_days)\n",
    "                    ],\n",
    "                    [i] * (num_of_days)\n",
    "                    \n",
    "                    ]\n",
    "        \n",
    "        if data is None:\n",
    "            data = tmp\n",
    "        else:\n",
    "            data = np.r_[\n",
    "                tmp,\n",
    "                data\n",
    "            ]\n",
    "\n",
    "# Column index into the data\n",
    "first_frequency_column = 1\n",
    "period_column = 0\n",
    "date_column = data.shape[-1]-2\n",
    "source_column = data.shape[-1]-1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hierarchical Message Data Model\n",
    "Next, we create a message data model that describes how our messages are organized in a type hierarchy. In this case, we assume a hierachical structure for the messages, where the path of the message is returned by msg_path and likewise, it is also possible to return a severity level of the message in order to evaluate its importance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def msg_path(x): # Returns a list of strings with 3 elements\n",
    "    return [\"Type_%i\"%(x/N) for N in [50, 10, 2]]\n",
    "\n",
    "def severity_level(x): # returns 3 different severity levels: 0, 1, 2\n",
    "    return x-(x/3)*3\n",
    "\n",
    "model = visisc.MessageDataModel.hierarchical_model(\n",
    "    message_columns=range(first_frequency_column,date_column),\n",
    "    get_message_path = msg_path,\n",
    "    get_severity_level = severity_level,\n",
    "    num_of_severity_levels=3\n",
    ")\n",
    "\n",
    "data_object = model.data_object(\n",
    "    data,\n",
    "    source_column = source_column,\n",
    "    class_column = source_column,\n",
    "    period_column=period_column,\n",
    "    date_column=date_column,\n",
    ")\n",
    "\n",
    "anomaly_detector = model.fit_anomaly_detector(data_object,poisson_onesided=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization\n",
    "Finally, we can viualize the message frequency data using the Visualization class. However, due to incompatibility between the used 3D engine and Jupyter notebook, we have to run the notebook as a script:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "vis = visisc.Visualization(model, 13.8,start_day=209)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!ipython --matplotlib=wx --gui=wx -i visISC_hierachical_frequency_data_example.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Class Level Visualization\n",
    "Now, you should see a window similar to the picture shown below. This is very similar to the what we got with the <a href=\"visISC_simple_frequency_data_example.ipynb\">flat model example</a>. However, in this case, we also have different shades of red to indicate different severity levels. Darker red indicates more sever messages and lighter red indicates less sever messages. Each column shows the total number of messages for each source (or message type in next pictures) and the color the most anomalous severity level.<br/>\n",
    "<img width=\"75%\" src=\"./hierarchy_vis_1.png\"/><br/>\n",
    "### Root Level Visualization\n",
    "However, now when we click on a source label, only the message type levels below the root level are shown.<br/>\n",
    "<img width=\"75%\" src=\"hierarchy_vis_2.png\"/>\n",
    "### Middle Message Level Visualization\n",
    "It is now also possible to click on the message types to zoom down in the message hierarchy in order to find where the anomalies originated from. By clicking on the message types below the root, we get to the middle level message types shown below.<br/>\n",
    "<img width=\"75%\" src=\"hierarchy_vis_3.png\"/><br/>\n",
    "### Ground Level Visualization\n",
    "Finally, by clicking on the middle level message types we get to the leaf nodes of the hierarchy. Similarly to the flat model case, the anomalies are almost only visible at higher levels of the hierarchy.<br/>\n",
    "<img width=\"75%\" src=\"hierarchy_vis_4.png\"/><br/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2.0
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}